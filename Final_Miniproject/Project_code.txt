import tkinter as tk
import pandas as pd 
from tkinter import messagebox
import sqlite3

def create_database():
    conn = sqlite3.connect('travel_booking.db')
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS travel_details(id INTEGER PRIMARY KEY, name TEXT, age TEXT, phone TEXT, arrival TEXT, destination TEXT, date TEXT, time TEXT, fare TEXT)')
    conn.commit()
    conn.close()

def insert_data(name, age, phone, arrival, destination, date, time, fare):
    try:
        conn = sqlite3.connect('travel_booking.db')
        cursor = conn.cursor()
        cursor.execute('INSERT INTO travel_details(name, age, phone, arrival, destination, date, time, fare) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', (name, age, phone, arrival, destination, date, time, fare))
        conn.commit()
        conn.close()
        messagebox.showinfo('Success', 'Booked successfully!')
    except sqlite3.Error as e:
        messagebox.showerror('Error', 'Error inserting data: {}'.format(e))

def fetch_all_records():
    try:
        conn = sqlite3.connect('travel_booking.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM travel_details')
        rows = cursor.fetchall()
        conn.close()
        return rows
    except sqlite3.Error as e:
        messagebox.showerror('Error', 'Error fetching data: {}'.format(e))

def update_data(name, age, phone, arrival, destination, date, time, fare, passenger_id):
    try:
        conn = sqlite3.connect('travel_booking.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE travel_details SET name=?, age=?, phone=?, arrival=?, destination=?, date=?, time=?, fare=? WHERE id=?', (name, age, phone, arrival, destination, date, time, fare, passenger_id))
        conn.commit()
        conn.close()
        messagebox.showinfo('Success', 'Data updated successfully!')
    except sqlite3.Error as e:
        messagebox.showerror('Error', 'Error updating data: {}'.format(e))

def delete_data(passenger_id):
    try:
        conn = sqlite3.connect('travel_booking.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM travel_details WHERE id=?', (passenger_id,))
        conn.commit()
        conn.close()
        messagebox.showinfo('Success', 'Data deleted successfully!')
    except sqlite3.Error as e:
        messagebox.showerror('Error', 'Error deleting data: {}'.format(e))

def import_data():
    try:
        conn = sqlite3.connect('travel_booking.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM travel_details')
        rows = cursor.fetchall()
        
        df=pd.DataFrame(rows,columns=[col[0]for col in cursor.description])
        df.to_excel('travel_list.xlsx',index=False)
        messagebox.showinfo('Success', 'Data exported to travel_list.txt!')
    except sqlite3.Error as e:
        messagebox.showerror('Error', 'Error exporting data: {}'.format(e))
        conn.close()
        
def clear_entry(*entries):
    for entry in entries:
        entry.delete(0, tk.END)
        
def on_enter(entry):
    now_entry=entry.widget
    index=entry_widget.index(now_entry)
    
    if index < len(entry_widget)-1:
        next_entry=entry_widget[index+1]
        next_entry.focus_set()
        
def on_return(entry):
    now_entry=entry.widget
    index=entry_widget.index(now_entry)
    
    if index > 0:
        back_entry=entry_widget[index-1]
        back_entry.focus_set()

def admin_window(root, name_entry, age_entry, phone_entry, arrival_entry, destination_entry, date_entry, time_entry, fare_entry):
    admin = tk.Toplevel(root)
    admin.geometry('800x500')
    admin.title("Admin")
    header_admin = tk.Label(admin, text="Admin window",font=("helvetica",20))
    header_admin.place(x=20,y=20)

    name_label = tk.Label(admin, text="Name:")
    age_label = tk.Label(admin, text="Age:")
    phone_label = tk.Label(admin, text="Phone No:")
    arrival_label = tk.Label(admin, text="Arrival:")
    destination_label = tk.Label(admin, text="Destination:")
    date_label = tk.Label(admin, text="Date:")
    time_label = tk.Label(admin, text='Time:')
    fare_label = tk.Label(admin, text='Total Fare:')
    passenger_id_label = tk.Label(admin, text='Passenger ID:')

    name_entry_admin = tk.Entry(admin, width=30)
    age_entry_admin = tk.Entry(admin, width=15)
    phone_entry_admin = tk.Entry(admin, width=30)
    arrival_entry_admin = tk.Entry(admin, width=30)
    destination_entry_admin = tk.Entry(admin, width=30)
    date_entry_admin = tk.Entry(admin, width=30)
    time_entry_admin = tk.Entry(admin, width=30)
    fare_entry_admin = tk.Entry(admin, width=30)
    passenger_id_entry_admin = tk.Entry(admin, width=15)
    
    update_button = tk.Button(admin, text="Update", command=lambda: update_button_clicked(name_entry_admin, age_entry_admin, phone_entry_admin, arrival_entry_admin, destination_entry_admin, date_entry_admin, time_entry_admin, fare_entry_admin, passenger_id_entry_admin))
    delete_button = tk.Button(admin, text="Delete", command=lambda: delete_button_clicked(passenger_id_entry_admin))
    import_button = tk.Button(admin,text="Import",command=import_data)
    close_button = tk.Button(admin, text="Close", command=admin.destroy)
    reset_button = tk.Button(admin, text="Reset", command=lambda: clear_entry(name_entry_admin, age_entry_admin, phone_entry_admin, arrival_entry_admin, destination_entry_admin, date_entry_admin, time_entry_admin, fare_entry_admin, passenger_id_entry_admin))

    name_label.place(x=250,y=70)
    name_entry_admin.place(x=370,y=71)
    age_label.place(x=250,y=100)
    age_entry_admin.place(x=370,y=101)
    phone_label.place(x=250,y=130)
    phone_entry_admin.place(x=370,y=131)
    arrival_label.place(x=250,y=160)
    arrival_entry_admin.place(x=370,y=161)
    destination_label.place(x=250,y=190)
    destination_entry_admin.place(x=370,y=191)
    date_label.place(x=250,y=220)
    date_entry_admin.place(x=370,y=221)
    time_label.place(x=250,y=250)
    time_entry_admin.place(x=370,y=251)
    fare_label.place(x=250,y=280)
    fare_entry_admin.place(x=370,y=281)
    passenger_id_label.place(x=250,y=310)
    passenger_id_entry_admin.place(x=370,y=311)

    update_button.place(x=550,y=450)
    delete_button.place(x=650,y=450)
    close_button.place(x=50,y=450)
    reset_button.place(x=560,y=311)
    import_button.place(x=100,y=450)
    
    name = name_entry_admin
    age = age_entry_admin
    phone = phone_entry_admin
    arrival = arrival_entry_admin
    destination = destination_entry_admin
    date = date_entry_admin
    time = time_entry_admin
    fare = fare_entry_admin
    ids = passenger_id_entry_admin
    
    entry_widget_2 =[name,age,phone,arrival,destination,date,time,fare,ids]
    for entry in entry_widget_2:
        entry.bind("<Return>",on_enter)
    for entry in entry_widget_2:
        entry.bind("<Escape>",on_return)
        
    display_all_records()

def display_all_records():
    records = fetch_all_records()

    if records:
        display_window = tk.Toplevel(root)
        display_window.title("All Records")

        text_widget = tk.Text(display_window, width=80, height=20)
        text_widget.pack()

        for record in records:
            text_widget.insert(tk.END, " | ".join(map(str, record)) + "\n")

        text_widget.config(state=tk.DISABLED)
    else:
        messagebox.showinfo('Info', 'No records found.')

def save_reset():
    name = name_entry.get()
    age = age_entry.get()
    phone = phone_entry.get()
    arrival = arrival_entry.get()
    destination = destination_entry.get()
    date = date_entry.get()
    time = time_entry.get()
    fare = fare_entry.get()

    insert_data(name, age, phone, arrival, destination, date, time, fare)
    clear_entry(name_entry, age_entry, phone_entry, arrival_entry, destination_entry, date_entry, time_entry, fare_entry)

def update_button_clicked(name_entry_admin, age_entry_admin, phone_entry_admin, arrival_entry_admin, destination_entry_admin, date_entry_admin, time_entry_admin, fare_entry_admin, passenger_id_entry_admin):
    passenger_id = passenger_id_entry_admin.get()
    name = name_entry_admin.get()
    age = age_entry_admin.get()
    phone = phone_entry_admin.get()
    arrival = arrival_entry_admin.get()
    destination = destination_entry_admin.get()
    date = date_entry_admin.get()
    time = time_entry_admin.get()
    fare = fare_entry_admin.get()

    if not passenger_id:
        messagebox.showerror('Error', 'Please enter a passenger ID for updating.')
    else:
        update_data(name, age, phone, arrival, destination, date, time, fare, passenger_id)
        clear_entry(passenger_id_entry_admin, name_entry_admin, age_entry_admin, phone_entry_admin, arrival_entry_admin, destination_entry_admin, date_entry_admin, time_entry_admin, fare_entry_admin)

def delete_button_clicked(passenger_id_entry_admin):
    passenger_id = passenger_id_entry_admin.get()

    if not passenger_id:
        messagebox.showerror('Error', 'Please enter a passenger ID for deleting.')
    else:
        delete_data(passenger_id)
        clear_entry(passenger_id_entry_admin)

root = tk.Tk()
root.geometry('800x500')
root.title("Travels Data")
header_root = tk.Label(root,text="Booking window",font=("helvetica",20))
header_root.place(x=20,y=20)
create_database()

name_label = tk.Label(root, text="Name:")
name_entry = tk.Entry(root, width=30)
age_label = tk.Label(root, text="Age:")
age_entry = tk.Entry(root, width=15)
phone_label = tk.Label(root, text="Phone No:")
phone_entry = tk.Entry(root, width=30)
arrival_label = tk.Label(root, text="Arrival:")
arrival_entry = tk.Entry(root, width=30)
destination_label = tk.Label(root, text="Destination:")
destination_entry = tk.Entry(root, width=30)
date_label = tk.Label(root, text="Date:")
date_entry = tk.Entry(root, width=30)
time_label = tk.Label(root, text='Time:')
time_entry = tk.Entry(root, width=30)
fare_label = tk.Label(root, text='Total Fare:')
fare_entry = tk.Entry(root, width=30)

save_button = tk.Button(root, text="Save Data", command=save_reset)
admin_button = tk.Button(root, text="Admin", command=lambda: admin_window(root, name_entry, age_entry, phone_entry, arrival_entry, destination_entry, date_entry, time_entry, fare_entry))
close_button = tk.Button(root, text="Close", command=root.destroy)
reset_button = tk.Button(root, text="Reset", command=lambda: clear_entry(name_entry, age_entry, phone_entry, arrival_entry, destination_entry, date_entry, time_entry, fare_entry))

name_label.place(x=250, y=90)
name_entry.place(x=370, y=91)
age_label.place(x=250, y=130)
age_entry.place(x=370, y=131)
phone_label.place(x=250, y=170)
phone_entry.place(x=370, y=171)
arrival_label.place(x=250, y=210)
arrival_entry.place(x=370, y=211)
destination_label.place(x=250, y=250)
destination_entry.place(x=370, y=251)
date_label.place(x=250, y=290)
date_entry.place(x=370, y=291)
time_label.place(x=250, y=330)
time_entry.place(x=370, y=331)
fare_label.place(x=250, y=370)
fare_entry.place(x=370, y=371)
admin_button.place(x=50, y=450)
save_button.place(x=650, y=450)
close_button.place(x=550, y=450)
reset_button.place(x=560, y=370)

name = name_entry
age = age_entry
phone = phone_entry
arrival = arrival_entry
destination = destination_entry
date = date_entry
time = time_entry
fare = fare_entry

entry_widget =[name,age,phone,arrival,destination,date,time,fare]
for entry in entry_widget:
    entry.bind("<Return>",on_enter)
for entry in entry_widget:
    entry.bind("<Escape>",on_return)

root.mainloop()
